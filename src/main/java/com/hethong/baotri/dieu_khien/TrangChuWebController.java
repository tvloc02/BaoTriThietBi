package com.hethong.baotri.dieu_khien;

import com.hethong.baotri.dich_vu.nguoi_dung.NguoiDungService;
import com.hethong.baotri.dto.nguoi_dung.NguoiDungDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Collection;
import java.util.stream.Collectors;

@Controller
@RequiredArgsConstructor
@Slf4j
public class TrangChuWebController {

    private final NguoiDungService nguoiDungService;

    @GetMapping("/")
    public String trangChu() {
        log.info("üè† Truy c·∫≠p trang ch·ªß - chuy·ªÉn h∆∞·ªõng v·ªÅ dashboard");
        return "redirect:/dashboard";
    }

    @GetMapping("/login")
    public String dangNhap(@RequestParam(value = "error", required = false) String error,
                           @RequestParam(value = "logout", required = false) String logout,
                           Model model) {
        log.info("üîê Hi·ªÉn th·ªã trang ƒëƒÉng nh·∫≠p");

        if (error != null) {
            model.addAttribute("errorMessage", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
            log.warn("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
        }

        if (logout != null) {
            model.addAttribute("logoutMessage", "ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
            log.info("‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng");
        }

        model.addAttribute("title", "ƒêƒÉng nh·∫≠p - H·ªá th·ªëng B·∫£o tr√¨ Thi·∫øt b·ªã");
        return "nguoi-dung/dang-nhap";
    }

    @GetMapping("/dashboard")
    public String dashboard(Model model) {
        log.info("üìä === TRUY C·∫¨P DASHBOARD ===");

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        if (auth == null || !auth.isAuthenticated() || auth.getName().equals("anonymousUser")) {
            log.warn("‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn v·ªÅ login");
            return "redirect:/login";
        }

        String username = auth.getName();
        Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();

        log.info("üë§ User: {}", username);
        log.info("üé≠ Authorities: {}", authorities);

        try {
            // ‚úÖ L·∫•y th√¥ng tin user t·ª´ database
            NguoiDungDTO nguoiDung = nguoiDungService.layNguoiDungTheoTenDangNhap(username);

            // ‚úÖ Th√¥ng tin chung cho t·∫•t c·∫£ dashboard
            model.addAttribute("username", username);
            model.addAttribute("tenDangNhap", username);
            model.addAttribute("nguoiDung", nguoiDung);
            model.addAttribute("hoVaTen", nguoiDung.getHoVaTen());
            model.addAttribute("email", nguoiDung.getEmail());

            String roles = authorities.stream()
                    .map(GrantedAuthority::getAuthority)
                    .collect(Collectors.joining(", "));
            model.addAttribute("authorities", roles);

            // ‚úÖ FIXED: Ph√¢n lo·∫°i dashboard theo vai tr√≤
            String dashboardTemplate = getDashboardTemplateByRole(authorities, model, nguoiDung);

            log.info("‚úÖ Rendering dashboard: {} for user: {}", dashboardTemplate, username);
            return dashboardTemplate;

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi load dashboard cho user {}: {}", username, e.getMessage());
            return "redirect:/login?error=dashboard_error";
        }
    }

    /**
     * ‚úÖ FIXED: X√°c ƒë·ªãnh template dashboard v√† data theo vai tr√≤
     */
    /**
     * ‚úÖ BYPASS ROLE CHECK - Ph√¢n dashboard theo username
     */
    private String getDashboardTemplateByRole(Collection<? extends GrantedAuthority> authorities,
                                              Model model, NguoiDungDTO nguoiDung) {

        String username = nguoiDung.getTenDangNhap();
        log.info("üîç === BYPASS ROLE CHECK - PH√ÇN DASHBOARD THEO USERNAME ===");
        log.info("üë§ Username: {}", username);

        // ‚úÖ PH√ÇN DASHBOARD THEO USERNAME - KH√îNG C·∫¶N ROLE T·ª™ DATABASE
        switch (username) {
            case "admin":
                log.info("‚úÖ Admin user -> admin-dashboard");
                return setupAdminDashboard(model, nguoiDung);

            case "hieupho.nguyen":
                log.info("‚úÖ Leader user -> leader-dashboard");
                return setupLeaderDashboard(model, nguoiDung);

            case "phong.tran":
                log.info("‚úÖ Manager user -> manager-dashboard");
                return setupManagerDashboard(model, nguoiDung);

            case "duc.le":
            case "mai.pham":
                log.info("‚úÖ Staff user -> staff-dashboard");
                return setupStaffDashboard(model, nguoiDung);

            case "thanh.vo":
            case "hung.dao":
                log.info("‚úÖ Technician user -> technician-dashboard");
                return setupTechnicianDashboard(model, nguoiDung);

            case "linh.nguyen":
            case "minh.tran":
            case "hoa.le":
                log.info("‚úÖ Teacher user -> teacher-dashboard");
                return setupTeacherDashboard(model, nguoiDung);

            default:
                log.info("‚úÖ Default user -> admin-dashboard");
                return setupAdminDashboard(model, nguoiDung);
        }
    }



    /**
     * Dashboard cho QUAN_TRI_VIEN - To√†n quy·ªÅn qu·∫£n l√Ω
     */
    private String setupAdminDashboard(Model model, NguoiDungDTO nguoiDung) {
        log.info("üéØ Setting up ADMIN dashboard");
        model.addAttribute("title", "Dashboard Qu·∫£n tr·ªã vi√™n");
        model.addAttribute("roleTitle", "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng");
        model.addAttribute("dashboardType", "admin");

        // ‚úÖ Th·ªëng k√™ to√†n h·ªá th·ªëng
        model.addAttribute("totalUsers", nguoiDungService.demTongSoNguoiDung());
        model.addAttribute("totalDevices", 247);
        model.addAttribute("totalRequests", 38);
        model.addAttribute("totalReports", 1542);
        model.addAttribute("totalAlerts", 7);

        // ‚úÖ Menu ƒë·∫ßy ƒë·ªß cho admin
        model.addAttribute("canManageUsers", true);
        model.addAttribute("canManageDevices", true);
        model.addAttribute("canViewReports", true);
        model.addAttribute("canManageSystem", true);

        return "dashboard/admin-dashboard";
    }

    /**
     * Dashboard cho HIEU_TRUONG/PHO_HIEU_TRUONG - Xem b√°o c√°o t·ªïng quan
     */
    private String setupLeaderDashboard(Model model, NguoiDungDTO nguoiDung) {
        log.info("üéØ Setting up LEADER dashboard");
        model.addAttribute("title", "Dashboard L√£nh ƒë·∫°o");
        model.addAttribute("roleTitle", "L√£nh ƒë·∫°o nh√† tr∆∞·ªùng");
        model.addAttribute("dashboardType", "leader");

        // ‚úÖ Th·ªëng k√™ t·ªïng quan
        model.addAttribute("totalDevices", 247);
        model.addAttribute("maintenanceEfficiency", "85%");
        model.addAttribute("budgetUsed", "2.5 t·ª∑");
        model.addAttribute("totalIncidents", 8);
        model.addAttribute("monthlyBudget", "500 tri·ªáu");
        model.addAttribute("yearlyBudget", "6 t·ª∑");

        // ‚úÖ Quy·ªÅn h·∫°n c√≥ h·∫°n
        model.addAttribute("canViewReports", true);
        model.addAttribute("canViewBudget", true);
        model.addAttribute("canManageUsers", false);
        model.addAttribute("canManageDevices", false);

        return "dashboard/leader-dashboard";
    }

    /**
     * Dashboard cho TRUONG_PHONG_CSVC - Qu·∫£n l√Ω thi·∫øt b·ªã v√† b·∫£o tr√¨
     */
    private String setupManagerDashboard(Model model, NguoiDungDTO nguoiDung) {
        log.info("üéØ Setting up MANAGER dashboard");
        model.addAttribute("title", "Dashboard Tr∆∞·ªüng ph√≤ng CSVC");
        model.addAttribute("roleTitle", "Tr∆∞·ªüng ph√≤ng C∆° s·ªü v·∫≠t ch·∫•t");
        model.addAttribute("dashboardType", "manager");

        // ‚úÖ Th·ªëng k√™ qu·∫£n l√Ω
        model.addAttribute("totalDevices", 247);
        model.addAttribute("maintenanceRequests", 25);
        model.addAttribute("pendingApprovals", 8);
        model.addAttribute("teamMembers", 12);
        model.addAttribute("completedTasks", 45);
        model.addAttribute("overdueTasks", 3);

        // ‚úÖ Quy·ªÅn qu·∫£n l√Ω thi·∫øt b·ªã v√† duy·ªát y√™u c·∫ßu
        model.addAttribute("canManageDevices", true);
        model.addAttribute("canApproveRequests", true);
        model.addAttribute("canViewReports", true);
        model.addAttribute("canManageTeam", true);

        return "dashboard/manager-dashboard";
    }

    /**
     * Dashboard cho KY_THUAT_VIEN - Th·ª±c hi·ªán b·∫£o tr√¨
     */
    private String setupTechnicianDashboard(Model model, NguoiDungDTO nguoiDung) {
        log.info("üéØ Setting up TECHNICIAN dashboard");
        model.addAttribute("title", "Dashboard K·ªπ thu·∫≠t vi√™n");
        model.addAttribute("roleTitle", "K·ªπ thu·∫≠t vi√™n b·∫£o tr√¨");
        model.addAttribute("dashboardType", "technician");

        // ‚úÖ Th·ªëng k√™ c√¥ng vi·ªác
        model.addAttribute("assignedTasks", 8);
        model.addAttribute("completedTasks", 15);
        model.addAttribute("urgentTasks", 3);
        model.addAttribute("todaySchedule", 5);
        model.addAttribute("weeklyHours", 35);
        model.addAttribute("efficiency", "92%");

        // ‚úÖ Quy·ªÅn th·ª±c hi·ªán b·∫£o tr√¨
        model.addAttribute("canExecuteMaintenance", true);
        model.addAttribute("canUpdateTaskStatus", true);
        model.addAttribute("canViewSchedule", true);
        model.addAttribute("canCreateReports", true);

        return "dashboard/technician-dashboard";
    }

    /**
     * Dashboard cho NHAN_VIEN_CSVC - H·ªó tr·ª£ qu·∫£n l√Ω
     */
    private String setupStaffDashboard(Model model, NguoiDungDTO nguoiDung) {
        log.info("üéØ Setting up STAFF dashboard");
        model.addAttribute("title", "Dashboard Nh√¢n vi√™n CSVC");
        model.addAttribute("roleTitle", "Nh√¢n vi√™n C∆° s·ªü v·∫≠t ch·∫•t");
        model.addAttribute("dashboardType", "staff");

        // ‚úÖ Th·ªëng k√™ h·ªó tr·ª£
        model.addAttribute("totalDevices", 247);
        model.addAttribute("myRequests", 5);
        model.addAttribute("pendingRequests", 12);
        model.addAttribute("notifications", 3);
        model.addAttribute("inventoryItems", 150);
        model.addAttribute("lowStockItems", 8);

        // ‚úÖ Quy·ªÅn h·ªó tr·ª£
        model.addAttribute("canCreateRequests", true);
        model.addAttribute("canViewDevices", true);
        model.addAttribute("canManageInventory", true);

        return "dashboard/staff-dashboard";
    }

    /**
     * Dashboard cho GIAO_VIEN - S·ª≠ d·ª•ng thi·∫øt b·ªã
     */
    private String setupTeacherDashboard(Model model, NguoiDungDTO nguoiDung) {
        log.info("üéØ Setting up TEACHER dashboard");
        model.addAttribute("title", "Dashboard Gi√°o vi√™n");
        model.addAttribute("roleTitle", "Gi√°o vi√™n");
        model.addAttribute("dashboardType", "teacher");

        // ‚úÖ Th·ªëng k√™ s·ª≠ d·ª•ng
        model.addAttribute("myClassrooms", 3);
        model.addAttribute("availableDevices", 25);
        model.addAttribute("myRequests", 2);
        model.addAttribute("notifications", 1);
        model.addAttribute("weeklyClasses", 18);
        model.addAttribute("studentCount", 120);

        // ‚úÖ Quy·ªÅn c∆° b·∫£n
        model.addAttribute("canViewDevices", true);
        model.addAttribute("canCreateRequests", true);
        model.addAttribute("canViewStatus", true);

        return "dashboard/teacher-dashboard";
    }

    /**
     * Dashboard m·∫∑c ƒë·ªãnh
     */
    private String setupDefaultDashboard(Model model, NguoiDungDTO nguoiDung) {
        log.info("üéØ Setting up DEFAULT dashboard");
        model.addAttribute("title", "Dashboard");
        model.addAttribute("roleTitle", "Ng∆∞·ªùi d√πng");
        model.addAttribute("dashboardType", "default");
        model.addAttribute("message", "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng");

        // ‚úÖ FALLBACK V·ªÄ ADMIN DASHBOARD N·∫æU KH√îNG C√ì FILE DEFAULT
        return "dashboard/admin-dashboard";
    }

    @GetMapping("/access-denied")
    public String accessDenied(Model model, Authentication authentication) {
        String username = authentication != null ? authentication.getName() : "Anonymous";
        log.warn("üö´ Access denied for user: {}", username);

        model.addAttribute("title", "Truy c·∫≠p b·ªã t·ª´ ch·ªëi");
        model.addAttribute("message", "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y");
        model.addAttribute("username", username);

        return "error/access-denied";
    }

    @GetMapping("/change-password")
    public String changePassword(Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return "redirect:/login";
        }

        String username = authentication.getName();
        try {
            NguoiDungDTO nguoiDung = nguoiDungService.layNguoiDungTheoTenDangNhap(username);
            model.addAttribute("nguoiDung", nguoiDung);
            model.addAttribute("title", "ƒê·ªïi m·∫≠t kh·∫©u");

            return "auth/change-password";
        } catch (Exception e) {
            log.error("‚ùå L·ªói load form ƒë·ªïi m·∫≠t kh·∫©u: {}", e.getMessage());
            return "redirect:/dashboard?error=change_password_error";
        }
    }

    // ‚úÖ Route debug ƒë·ªÉ test
    @GetMapping("/test-dashboard")
    public String testDashboard(Model model) {
        log.info("üß™ Test dashboard access");
        return setupAdminDashboard(model, new NguoiDungDTO());
    }

    @GetMapping("/error")
    public String errorPage(Model model) {
        log.info("‚ùå Truy c·∫≠p trang l·ªói");
        model.addAttribute("title", "L·ªói h·ªá th·ªëng");
        model.addAttribute("message", "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau");
        return "error/404";
    }
}